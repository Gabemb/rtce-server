# This file is automatically generated by create_routes.py.  Do NOT modify!!
"""
rpc_client.py

Implement a simple HTTP client with methods to send RPCs to the Rising
Thunder server.
"""

import requests
import google.protobuf.json_format

import tbadmin.account_pb2
import tbadmin.audit_pb2
import tbadmin.config_pb2
import tbadmin.match_pb2
import tbadmin.report_pb2
import tbadmin.shop_pb2
import tbadmin.stats_pb2
import tbmatch.account_pb2
import tbmatch.crash_pb2
import tbmatch.event_pb2
import tbmatch.lobby_pb2
import tbmatch.log_pb2
import tbmatch.match_pb2
import tbmatch.query_pb2
import tbmatch.session_pb2
import tbmatch.shop_pb2
import tbmatch.user_pb2
import tbrpc.tbrpc_pb2
import tbui.tbcharacter_pb2

class RpcClient(object):
    def __init__(self):
        self.session = requests.Session()


# tbadmin.AccountAdminService service
    def LookupUser(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.account_pb2.LookupUserRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'LookupUser'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbmatch.account_pb2.UserInfo()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def SearchUsers(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.account_pb2.SearchUsersRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'SearchUsers'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.account_pb2.SearchUsersResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def CreateUser(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.account_pb2.CreateUserRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'CreateUser'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.account_pb2.CreateUserResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def UpdateUser(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.account_pb2.UpdateUserRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'UpdateUser'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def SetUserContactAddress(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.account_pb2.SetUserContactAddressRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'SetUserContactAddress'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def SetUserAccess(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.account_pb2.SetUserAccessRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'SetUserAccess'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def SetUserLoginStatus(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.account_pb2.SetUserLoginStatusRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'SetUserLoginStatus'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def ResetUserPassword(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.account_pb2.ResetUserPasswordRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'ResetUserPassword'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def NukeHandle(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.account_pb2.NukeHandleRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'NukeHandle'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.account_pb2.NukeHandleResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def GetHandleHistory(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.account_pb2.GetHandleHistoryRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetHandleHistory'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.account_pb2.GetHandleHistoryResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def SendUserEmailNotification(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.account_pb2.SendUserEmailNotificationRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'SendUserEmailNotification'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response


# tbadmin.AuditService service
    def SearchAuditHistory(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.audit_pb2.SearchAuditHistoryRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'SearchAuditHistory'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.audit_pb2.SearchAuditHistoryResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response


# tbadmin.ConfigService service
    def GetAppConfig(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbrpc.tbrpc_pb2.Empty
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetAppConfig'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.config_pb2.AppConfig()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response


# tbadmin.MatchConfigService service
    def GetGlobalConfig(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbrpc.tbrpc_pb2.Empty
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetGlobalConfig'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.config_pb2.GetGlobalConfigResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def SetGlobalConfig(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.config_pb2.SetGlobalConfigRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'SetGlobalConfig'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def GetMatchQueueConfig(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbrpc.tbrpc_pb2.Empty
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetMatchQueueConfig'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.config_pb2.GetMatchQueueConfigResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def SetMatchQueueConfig(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.config_pb2.SetMatchQueueConfigRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'SetMatchQueueConfig'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def GetMatchUserConfig(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbrpc.tbrpc_pb2.Empty
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetMatchUserConfig'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.config_pb2.GetMatchUserConfigResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def SetMatchUserConfig(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.config_pb2.SetMatchUserConfigRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'SetMatchUserConfig'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def GetLobbyConfig(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbrpc.tbrpc_pb2.Empty
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetLobbyConfig'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.config_pb2.GetLobbyConfigResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def SetLobbyConfig(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.config_pb2.SetLobbyConfigRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'SetLobbyConfig'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def ListFeatureDefinitions(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbrpc.tbrpc_pb2.Empty
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'ListFeatureDefinitions'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.config_pb2.ListFeatureDefinitionsResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def SetFeatureDefinition(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.config_pb2.SetFeatureDefinitionRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'SetFeatureDefinition'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def DeleteFeatureDefinition(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.config_pb2.DeleteFeatureDefinitionRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'DeleteFeatureDefinition'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def ListFeatureRules(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbrpc.tbrpc_pb2.Empty
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'ListFeatureRules'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.config_pb2.ListFeatureRulesResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def GetActiveFeatures(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbrpc.tbrpc_pb2.Empty
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetActiveFeatures'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.config_pb2.GetActiveFeaturesResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def CreateFeatureRule(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.config_pb2.CreateFeatureRuleRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'CreateFeatureRule'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def UpdateFeatureRule(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.config_pb2.UpdateFeatureRuleRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'UpdateFeatureRule'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def DeleteFeatureRule(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.config_pb2.DeleteFeatureRuleRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'DeleteFeatureRule'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response


# tbadmin.MatchAdminService service
    def GetMatchQueueUsers(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.match_pb2.GetMatchQueueUsersRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetMatchQueueUsers'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.match_pb2.GetMatchQueueUsersResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def GetLobbies(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.match_pb2.GetLobbiesRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetLobbies'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.match_pb2.GetLobbiesResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def GetLobby(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.match_pb2.GetLobbyRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetLobby'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.match_pb2.GetLobbyResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def GetActiveMatches(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.match_pb2.GetActiveMatchesRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetActiveMatches'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.match_pb2.GetActiveMatchesResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def GetActiveMatch(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.match_pb2.GetActiveMatchRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetActiveMatch'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.match_pb2.GetActiveMatchResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def GetRecentMatches(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.match_pb2.GetRecentMatchesRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetRecentMatches'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.match_pb2.GetRecentMatchesResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def GetMatchDetail(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.match_pb2.GetMatchDetailRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetMatchDetail'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.match_pb2.GetMatchDetailResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def GetPlayerDetail(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.match_pb2.GetPlayerDetailRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetPlayerDetail'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.match_pb2.GetPlayerDetailResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response


# tbadmin.FailReportService service
    def ListDesyncs(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.report_pb2.ListDesyncsRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'ListDesyncs'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.report_pb2.ListDesyncsResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def ListCrashes(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.report_pb2.ListCrashesRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'ListCrashes'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.report_pb2.ListCrashesResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def ListCrashBuildIdentifiers(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.report_pb2.ListCrashBuildIdentifiersRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'ListCrashBuildIdentifiers'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.report_pb2.ListCrashBuildIdentifiersResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def ListCrashCollections(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.report_pb2.ListCrashCollectionsRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'ListCrashCollections'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.report_pb2.ListCrashCollectionsResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response


# tbadmin.ShopAdminService service
    def SearchPurchaseOrders(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.shop_pb2.SearchPurchaseOrdersRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'SearchPurchaseOrders'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.shop_pb2.SearchPurchaseOrdersResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def SyncPurchaseOrder(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.shop_pb2.SyncPurchaseOrderRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'SyncPurchaseOrder'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def VoidPurchaseOrder(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.shop_pb2.VoidPurchaseOrderRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'VoidPurchaseOrder'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def RefundPurchaseOrder(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.shop_pb2.RefundPurchaseOrderRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'RefundPurchaseOrder'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response


# tbadmin.StatsService service
    def CountUsers(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbrpc.tbrpc_pb2.Empty
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'CountUsers'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.stats_pb2.UserCountStats()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def GetSessions(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.stats_pb2.GetSessionsRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetSessions'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.stats_pb2.GetSessionsResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def GetCharacterUsage(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbadmin.stats_pb2.GetCharacterUsageRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetCharacterUsage'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbadmin.stats_pb2.GetCharacterUsageResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response


# tbmatch.AccountService service
    def CheckHandle(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.account_pb2.CheckHandleRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'CheckHandle'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def RegisterUser(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.account_pb2.RegisterUserRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'RegisterUser'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def ValidateUser(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.account_pb2.ValidateUserRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'ValidateUser'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbmatch.account_pb2.UserInfo()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def GetSecretQuestion(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.account_pb2.GetSecretQuestionRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetSecretQuestion'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbmatch.account_pb2.GetSecretQuestionResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def SendPasswordResetEmail(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.account_pb2.SendPasswordResetEmailRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'SendPasswordResetEmail'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def VerifyResetPasswordCode(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.account_pb2.VerifyResetPasswordCodeRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'VerifyResetPasswordCode'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def ResetPassword(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.account_pb2.ResetPasswordRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'ResetPassword'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def GetUserInfo(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbrpc.tbrpc_pb2.Empty
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetUserInfo'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbmatch.account_pb2.UserInfo()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def ResendValidationEmail(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbrpc.tbrpc_pb2.Empty
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'ResendValidationEmail'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def SetLocale(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.account_pb2.SetLocaleRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'SetLocale'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def SetContactAddress(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.account_pb2.ContactAddress
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'SetContactAddress'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def GetUserPrefs(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbrpc.tbrpc_pb2.Empty
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetUserPrefs'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbmatch.account_pb2.UserPrefs()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def SetUserPrefs(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.account_pb2.UserPrefs
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'SetUserPrefs'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def ChangePassword(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.account_pb2.ChangePasswordRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'ChangePassword'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def ChangeEmailAddress(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.account_pb2.ChangeEmailAddressRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'ChangeEmailAddress'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def RedeemAccessCode(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.account_pb2.RedeemAccessCodeRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'RedeemAccessCode'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response


# tbmatch.CrashReportService service
    def CrashReport(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.crash_pb2.CrashReportRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'CrashReport'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response


# tbmatch.EventService service
    def GetEvent(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.event_pb2.GetEventRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetEvent'
        r = self.session.post(url, data=payload, timeout=30)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbmatch.event_pb2.GetEventResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def EventPing(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbrpc.tbrpc_pb2.Empty
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'EventPing'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response


# tbmatch.LobbyService service
    def CreateLobby(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.lobby_pb2.CreateLobbyRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'CreateLobby'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def GetLobbyJoinCode(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.lobby_pb2.GetLobbyJoinCodeRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetLobbyJoinCode'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbmatch.lobby_pb2.GetLobbyJoinCodeResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def JoinLobbyByCode(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.lobby_pb2.JoinLobbyByCodeRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'JoinLobbyByCode'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def LeaveLobby(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbrpc.tbrpc_pb2.Empty
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'LeaveLobby'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def LobbySetReady(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.lobby_pb2.LobbySetReadyRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'LobbySetReady'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def LobbySetOwner(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.lobby_pb2.LobbySetOwnerRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'LobbySetOwner'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def LobbySetGameOptions(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.lobby_pb2.LobbySetGameOptionsRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'LobbySetGameOptions'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def LobbyBanUser(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.lobby_pb2.LobbyBanUserRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'LobbyBanUser'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def LobbyRemoveUser(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.lobby_pb2.LobbyRemoveUserRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'LobbyRemoveUser'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response


# tbmatch.MatchService service
    def GetGameProfile(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbrpc.tbrpc_pb2.Empty
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetGameProfile'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbmatch.match_pb2.GameProfile()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def PingTest(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbrpc.tbrpc_pb2.Empty
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'PingTest'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbmatch.match_pb2.PingTestResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def GetMatch(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.match_pb2.GetMatchRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetMatch'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def ResumeGetMatch(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbrpc.tbrpc_pb2.Empty
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'ResumeGetMatch'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def CancelGetMatch(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbrpc.tbrpc_pb2.Empty
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'CancelGetMatch'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def ResetGame(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.match_pb2.ResetGameRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'ResetGame'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def GetGameReplayRecord(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.match_pb2.GetGameReplayRecordRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetGameReplayRecord'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbmatch.match_pb2.GetGameReplayRecordResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def DesyncReport(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.match_pb2.DesyncReportRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'DesyncReport'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def UpdatePlayerPreferences(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.match_pb2.UpdatePlayerPreferencesRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'UpdatePlayerPreferences'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def GetPlayerStats(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbrpc.tbrpc_pb2.Empty
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetPlayerStats'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbmatch.match_pb2.GetPlayerStatsResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def GetRecentGames(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbrpc.tbrpc_pb2.Empty
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetRecentGames'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbmatch.match_pb2.GetRecentGamesResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response


# tbmatch.SessionService service
    def Login(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.session_pb2.LoginRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'Login'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def GetGameSessionTicket(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.session_pb2.GetGameSessionTicketRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetGameSessionTicket'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbmatch.session_pb2.GetGameSessionTicketResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def RedeemGameSessionTicket(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.session_pb2.RedeemGameSessionTicketRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'RedeemGameSessionTicket'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def Logout(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbrpc.tbrpc_pb2.Empty
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'Logout'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response


# tbmatch.ShopService service
    def GetStoredPaymentMethods(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbrpc.tbrpc_pb2.Empty
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetStoredPaymentMethods'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbmatch.shop_pb2.GetStoredPaymentMethodsResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def CreateStoredPaymentMethod(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.shop_pb2.PaymentMethod
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'CreateStoredPaymentMethod'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def UpdateStoredPaymentMethod(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.shop_pb2.PaymentMethod
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'UpdateStoredPaymentMethod'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def SetDefaultStoredPaymentMethod(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.shop_pb2.PaymentMethodId
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'SetDefaultStoredPaymentMethod'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def RemoveStoredPaymentMethod(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.shop_pb2.PaymentMethodId
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'RemoveStoredPaymentMethod'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbrpc.tbrpc_pb2.Empty()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def SubmitPurchaseOrder(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.shop_pb2.SubmitPurchaseOrderRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'SubmitPurchaseOrder'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbmatch.shop_pb2.SubmitPurchaseOrderResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def GetPurchaseOrder(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.shop_pb2.GetPurchaseOrderRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetPurchaseOrder'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbmatch.shop_pb2.PurchaseOrder()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def GetAccountOrderHistory(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.shop_pb2.GetAccountOrderHistoryRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetAccountOrderHistory'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbmatch.shop_pb2.GetAccountOrderHistoryResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def GetAccountBalanceHistory(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.shop_pb2.GetAccountBalanceHistoryRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetAccountBalanceHistory'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbmatch.shop_pb2.GetAccountBalanceHistoryResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

    def GetAccountBalance(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == tbmatch.shop_pb2.GetAccountBalanceRequest
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + 'GetAccountBalance'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = tbmatch.shop_pb2.GetAccountBalanceResult()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response


