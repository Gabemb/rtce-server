# This file is automatically generated by create_routes.py.  Do NOT modify!!
"""
rpc_client.py

Implement a simple HTTP client with methods to send RPCs to the Rising
Thunder server.
"""

import requests
import google.protobuf.json_format

% for i in imports:
import ${i}
% endfor

class RpcClient(object):
    def __init__(self):
        self.session = requests.Session()

% for service in services:

# ${service['name']} service
% for method in service['methods']:
    def ${method['name']}(self, request = None):
        if not request:
            request = tbrpc.tbrpc_pb2.Empty()
        assert type(request) == ${typemap[method['input']]}
        payload = request.SerializeToString()
        url = 'http://localhost:1337/_01/rpc/' + '${method["name"]}'
        r = self.session.post(url, data=payload)
        if r.status_code != 200:
            raise RuntimeError('rpc failed')
        
        r.raw.decode_content = True
        content = ''
        for chunk in r.iter_content(1024):
            content += chunk
        result = tbrpc.tbrpc_pb2.Result()
        result.ParseFromString(content)

        print google.protobuf.json_format.MessageToJson(result)
        if result.result != tbrpc.tbrpc_pb2.S_SUCCESS:
            raise RuntimeError('rpc failed')

        response = ${typemap[method['output']]}()
        response.ParseFromString(result.content)
        print google.protobuf.json_format.MessageToJson(response)

        return response

% endfor
% endfor
