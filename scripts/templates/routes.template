# This file is automatically generated by geneate_python.py.  Do NOT modify!!
"""
generated_routes.py

Implement low-level route handlers for all the protobuf services.  In the handlers,
either call the RPC handler registered in the app server or throw an exception if
no such handler exists.

See server/rpc.py for more information.

"""

import server.rpc
import tornado.web

% for i in imports:
import ${i}
% endfor

% for service in services:

# ${service['name']} service
% for method in service['methods']:
class ${method['name']}Handler(tornado.web.RequestHandler):
    def post(self):
        request = ${typemap[method['input']]}()
        request.ParseFromString(self.request.body)
        server.rpc.LogProto('received ${method['name']} ', request)

        handler = server.rpc.GetRouteHandler('${method["name"]}')
        if not handler:
            raise NotImplementedError('${service["name"]} ${method["name"]} not implemented!')

        response = ${typemap[method['output']]}()
        result = handler(request, response, self)
        server.rpc.LogProto('replying with ', response)

        # wrap the response in a tbrpc.Result and return
        result = tbrpc.tbrpc_pb2.Result()
        result.result = tbrpc.tbrpc_pb2.S_SUCCESS
        result.content = response.SerializeToString()
        self.write(result.SerializeToString())

% endfor
% endfor

def GetRoutes():
    """
    Return all the routes defined in this module.
    """
    return [
% for service in services:
% for method in service['methods']:
        (r'/_01/rpc/${method['name']}', ${method['name']}Handler),
% endfor
% endfor
    ]